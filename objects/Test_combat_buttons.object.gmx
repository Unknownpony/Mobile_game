<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Put sprite depended on x
lore = 0
switch (x)
{
    case 0: 
    {
        switch (y)
        {
            case 330: 
                sprite_index = Test_lore_button; 
                visible = 0;
                break;
            case 460: sprite_index = Test_attack_1; break;
            case 590: sprite_index = Test_attack_2; break;
        }         
    } break;
    case 1120:
    {
        switch (y)
        {
            case 330: 
                sprite_index = Test_lore_button; 
                visible = 0;
                break;
            case 460: sprite_index = Test_def; break;
            case 590: sprite_index = Test_pass; break;
        }         
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change color
image_blend = c_white
if(Battle_progress.active_unit.position&lt;9)
    switch(Battle_progress.active_unit.type_of_attack)
    {
        case 0: 
        {
            if(x==0 and y==460)
                image_blend = c_gray  
        }break;
        case 1:
        {
            if(x==0 and y==590)
                image_blend = c_gray 
        }break;
    }

    if(lore&lt;&gt;0)
        image_blend = c_gray
        
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Buttons behavior

if(Battle_progress.active_unit.position&lt;9)
    switch (x)
    {
        case 0: 
        {
            switch (y)
            {
                case 330: 
                {
                    if(lore==0)
                        lore = instance_create(view_xview[view_current]+200,view_yview[view_current]+80,Test_lore_showing)   
                    else
                    {
                        lore = 0
                        with(Test_lore_showing)
                        {
                            instance_destroy();
                        }
                    }
                } break;
                case 460: 
                {
                    if(Battle_progress.active_unit.type_of_attack &lt;&gt; 0)
                    {
                        SCR_Enemy_target_clean()
                        SCR_Enemy_target_clean()
                        Battle_progress.active_unit.type_of_attack = 0
                        SCR_Choice_target_system() 
                    }
                } break;
                case 590: 
                {
                    if(Battle_progress.active_unit.type_of_attack &lt;&gt; 1)
                    {
                        SCR_Enemy_target_clean()
                        SCR_Enemy_target_clean()
                        Battle_progress.active_unit.type_of_attack = 1
                        SCR_Choice_target_system() 
                    }
                } break;
            }         
        } break;
        case 1120:
        {
            switch (y)
            {
                case 330: 
                {
                    if(lore==0)
                        lore = instance_create(view_xview[view_current]+200,view_yview[view_current]+80,Test_lore_showing)   
                    else
                    {
                        lore = 0
                        with(Test_lore_showing)
                        {
                            instance_destroy();
                        }
                    }
                } break;
                case 460:
                {
                    if(Battle_progress.active_unit.def&lt;&gt; 1)
                    {
                        Battle_progress.active_unit.def = 1
                        Battle_progress.everyone = 0
                        Battle_progress.queue_turn++
                        Battle_progress.active_unit.active_turn=0
                        SCR_Enemy_target_clean()
                        SCR_Enemy_target_clean()
                        show_message("Defence")
                    }
                } break;
                case 590:
                {
                    Battle_progress.everyone = 0
                    Battle_progress.queue_turn++
                    Battle_progress.active_unit.active_turn=0
                    SCR_Enemy_target_clean()
                    SCR_Enemy_target_clean()
                    show_message("Pass")
                } break;
            }         
        } break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
